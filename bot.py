import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
import requests
from io import BytesIO
import pandas as pd
from fpdf import FPDF
from math import radians, cos, sin, sqrt, atan2

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏–π
all_units = [
    {"kadnum": f"77:01:000401:{100 + i}", "area": 80 + i * 5,
     "type": "–Ω–µ–∂–∏–ª–æ–µ" if i % 2 == 0 else "–∂–∏–ª–æ–µ",
     "usage": "–æ—Ñ–∏—Å" if i % 3 else "–º–∞–≥–∞–∑–∏–Ω",
     "lat": 55.75 + i * 0.001, "lon": 37.62 + i * 0.001}
    for i in range(25)
]

user_history = {}
user_compare = {}

def haversine(lat1, lon1, lat2, lon2):
    R = 6371.0
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return R * c

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É", callback_data='search_by_kadnum')],
        [InlineKeyboardButton("üìç –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º", callback_data='search_by_address')],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç XLSX", callback_data='export_units'),
         InlineKeyboardButton("üìù –≠–∫—Å–ø–æ—Ä—Ç PDF", callback_data='export_units_pdf')],
        [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data='show_comparison')],
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        params = {"q": text, "format": "json"}
        res = requests.get("https://nominatim.openstreetmap.org/search", params=params, headers={"User-Agent": "real-estate-bot"})
        data = res.json()
        if not data:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É.")
            return

        lat, lon = float(data[0]["lat"]), float(data[0]["lon"])
        kadnum = "77:01:000401:999"
        user_id = update.effective_user.id
        user_history.setdefault(user_id, []).insert(0, f"{text} ‚Üí {kadnum}")
        user_history[user_id] = user_history[user_id][:5]

        info = f"üè¢ –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É:\n–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {kadnum}\n–¢–∏–ø: –ó–¥–∞–Ω–∏–µ\n–ü–ª–æ—â–∞–¥—å: 1200 –º¬≤\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û—Ñ–∏—Å"
        keyboard = [
            [InlineKeyboardButton("üåç –ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫", callback_data='show_land')],
            [InlineKeyboardButton("üì¶ –ü–æ–º–µ—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏", callback_data='show_units:0')],
            [InlineKeyboardButton("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤", callback_data='check_risks')],
            [InlineKeyboardButton("üìç –°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã (300 –º)", callback_data=f'nearby:{lat},{lon}')],
            [InlineKeyboardButton("‚ûï –í —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", callback_data=f'add_compare:{kadnum}')],
        ]
        await update.message.reply_text(info, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("add_compare:"):
        kadnum = query.data.split(":")[1]
        user_compare.setdefault(user_id, set()).add(kadnum)
        await query.message.reply_text(f"‚úÖ –û–±—ä–µ–∫—Ç {kadnum} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ.")
    elif query.data == "show_comparison":
        compare = user_compare.get(user_id, set())
        if not compare:
            await query.message.reply_text("üìä –°–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—É—Å—Ç.")
            return
        text = "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤:\n"
        for i, k in enumerate(compare, 1):
            unit = next((u for u in all_units if u['kadnum'] == k), None)
            if unit:
                text += f"{i}. {unit['kadnum']} | {unit['area']} –º¬≤ | {unit['usage']} | {unit['type']}\n"
            else:
                text += f"{i}. {k} ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        await query.message.reply_text(text)
    elif query.data.startswith("nearby:"):
        lat, lon = map(float, query.data.split(":")[1].split(","))
        nearby = [u for u in all_units if haversine(lat, lon, u["lat"], u["lon"]) <= 0.3]
        if not nearby:
            await query.message.reply_text("üîç –†—è–¥–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        reply = "üèò –û–±—ä–µ–∫—Ç—ã —Ä—è–¥–æ–º (–¥–æ 300 –º):\n"
        for i, u in enumerate(nearby, 1):
            reply += f"{i}. {u['kadnum']} | {u['area']} –º¬≤ | {u['usage']} | {u['type']}\n"
        await query.message.reply_text(reply)

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    history = user_history.get(user_id, [])
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    msg = "üïò –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n" + "\n".join([f"{i+1}. {h}" for i, h in enumerate(history)])
    await update.message.reply_text(msg)

async def export_units(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = pd.DataFrame(all_units)
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)
    await update.callback_query.message.reply_document(
        document=InputFile(output, filename="units.xlsx"),
        caption="üì§ –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω."
    )

async def export_units_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="–°–ø–∏—Å–æ–∫ –ø–æ–º–µ—â–µ–Ω–∏–π", ln=True, align="C")
    for u in all_units:
        pdf.cell(200, 8, txt=f"{u['kadnum']} | {u['area']} –º¬≤ | {u['usage']} | {u['type']}", ln=True)
    output = BytesIO()
    pdf.output(output)
    output.seek(0)
    await update.callback_query.message.reply_document(
        document=InputFile(output, filename="units.pdf"),
        caption="üìù PDF —ç–∫—Å–ø–æ—Ä—Ç."
    )

def main():
    token = os.getenv("YOUR_TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("history", show_history))
    app.add_handler(CommandHandler("nearby", find_nearby_objects))
    app.add_handler(CallbackQueryHandler(export_units, pattern="^export_units$"))
    app.add_handler(CallbackQueryHandler(export_units_pdf, pattern="^export_units_pdf$"))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address))
    app.run_polling()

if __name__ == '__main__':
    main()
