
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
import requests
from io import BytesIO
import pandas as pd
from fpdf import FPDF
from math import radians, cos, sin, sqrt, atan2

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏–π
all_units = [
    {"kadnum": f"77:01:000401:{100 + i}", "area": 80 + i * 5, "type": "–Ω–µ–∂–∏–ª–æ–µ" if i % 2 == 0 else "–∂–∏–ª–æ–µ", "usage": "–æ—Ñ–∏—Å" if i % 3 else "–º–∞–≥–∞–∑–∏–Ω", "lat": 55.75 + (i * 0.001), "lon": 37.62 + (i * 0.001)} for i in range(25)
]

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
user_history = {}
user_compare = {}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def haversine(lat1, lon1, lat2, lon2):
    R = 6371.0
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c

async def find_nearby_objects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        lat, lon = map(float, text.split(","))
        nearby = [
            u for u in all_units
            if haversine(lat, lon, u["lat"], u["lon"]) <= 0.3  # —Ä–∞–¥–∏—É—Å 300 –º
        ]
        if not nearby:
            await update.message.reply_text("üîç –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        reply = "üèò –û–±—ä–µ–∫—Ç—ã —Ä—è–¥–æ–º (–¥–æ 300 –º):\n"
        for i, u in enumerate(nearby, 1):
            reply += f"{i}. {u['kadnum']} | {u['area']} –º¬≤ | {u['usage']} | {u['type']}\n"
        await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Å–µ–¥–µ–π: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞")

def main():
    token = os.getenv("YOUR_TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("history", show_history))
    app.add_handler(CommandHandler("nearby", find_nearby_objects))
    app.add_handler(CallbackQueryHandler(export_units, pattern="^export_units$"))
    app.add_handler(CallbackQueryHandler(export_units_pdf, pattern="^export_units_pdf$"))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address))
    app.run_polling()

if __name__ == '__main__':
    main()
