import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
import requests
from io import BytesIO

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É", callback_data='search_by_kadnum')],
        [InlineKeyboardButton("üìç –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º", callback_data='search_by_address')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'search_by_kadnum':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
        context.user_data['state'] = 'awaiting_kadnum'
    elif query.data == 'search_by_address':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
        context.user_data['state'] = 'awaiting_address'
    elif query.data == 'show_land':
        await query.edit_message_text("üîç –£—á–∞—Å—Ç–æ–∫ –∑–¥–∞–Ω–∏—è:\n–ö–∞–¥–∞—Å—Ç—Ä: 77:01:000401:777\n–ü–ª–æ—â–∞–¥—å: 2 400 –º¬≤\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ")
    elif query.data == 'show_units':
        await query.edit_message_text("üì¶ –ü–æ–º–µ—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è:\n1. 77:01:000401:111 ‚Äî 120 –º¬≤ ‚Äî –æ—Ñ–∏—Å\n2. 77:01:000401:112 ‚Äî 95 –º¬≤ ‚Äî –º–∞–≥–∞–∑–∏–Ω\n3. 77:01:000401:113 ‚Äî 180 –º¬≤ ‚Äî –∫–∞—Ñ–µ")
    elif query.data == 'check_risks':
        await query.edit_message_text("üõë –†–∏—Å–∫–∏:\n- –í–∏–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –¥–æ–ø—É—Å—Ç–∏–º\n- –ü–ª–æ—â–∞–¥—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n- –ù–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ö—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω–µ (–ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–∞–Ω–Ω—ã–º)")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    text = update.message.text.strip()

    if state == 'awaiting_kadnum':
        await handle_kadnum(update, context, text)
    elif state == 'awaiting_address':
        await handle_address(update, context, text)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é: /start")

async def handle_kadnum(update: Update, context: ContextTypes.DEFAULT_TYPE, kadnum: str):
    info = f"–û–±—ä–µ–∫—Ç —Å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º {kadnum}\n–¢–∏–ø: –ó–¥–∞–Ω–∏–µ\n–ü–ª–æ—â–∞–¥—å: 1200 –º¬≤\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û—Ñ–∏—Å\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –£–ö: +7 (495) 123-45-67"
    keyboard = [
        [InlineKeyboardButton("üåç –£—á–∞—Å—Ç–æ–∫ –∑–¥–∞–Ω–∏—è", callback_data='show_land')],
        [InlineKeyboardButton("üì¶ –ü–æ–º–µ—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏", callback_data='show_units')],
        [InlineKeyboardButton("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤", callback_data='check_risks')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    lat, lon = 55.751244, 37.618423
    map_url = f"https://static-maps.yandex.ru/1.x/?ll={lon},{lat}&z=17&size=600,400&l=map&pt={lon},{lat},pm2rdm"
    try:
        response = requests.get(map_url)
        if response.status_code == 200:
            image = BytesIO(response.content)
            await update.message.reply_photo(photo=image, caption=info, reply_markup=reply_markup)
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: {e}")

    await update.message.reply_text(info + f"\n\n–ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}", reply_markup=reply_markup)

async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE, address: str):
    try:
        params = {"q": address, "format": "json"}
        res = requests.get("https://nominatim.openstreetmap.org/search", params=params, headers={"User-Agent": "real-estate-bot"})
        data = res.json()
        if not data:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.")
            return
        lat, lon = data[0]["lat"], data[0]["lon"]
        map_url = f"https://static-maps.yandex.ru/1.x/?ll={lon},{lat}&z=17&size=600,400&l=map&pt={lon},{lat},pm2rdm"
        response = requests.get(map_url)
        if response.status_code == 200:
            image = BytesIO(response.content)
            await update.message.reply_photo(photo=image, caption=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
        else:
            await update.message.reply_text(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n(–ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

def main():
    token = os.getenv("YOUR_TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == '__main__':
    main()
