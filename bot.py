import os
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
import requests
from io import BytesIO
import pandas as pd
from fpdf import FPDF

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
GEOCODER_URL = "https://geocode-maps.yandex.ru/1.x/"

async def fetch_coordinates(address):
    params = {
        "apikey": YANDEX_API_KEY,
        "geocode": address,
        "format": "json",
        "results": 5
    }
    try:
        response = requests.get(GEOCODER_URL, params=params)
        response.raise_for_status()
        geo_data = response.json()
        feature_member = geo_data['response']['GeoObjectCollection']['featureMember']
        if not feature_member:
            return None
        suggestions = []
        for item in feature_member:
            obj = item['GeoObject']
            coords = obj['Point']['pos'].split()
            address_text = obj['metaDataProperty']['GeocoderMetaData']['text']
            suggestions.append({
                "address": address_text,
                "lat": float(coords[1]),
                "lon": float(coords[0])
            })
        return suggestions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return None

async def fetch_district_and_metro(lat, lon):
    try:
        district, metro = None, None
        for kind in ["district", "metro"]:
            response = requests.get(GEOCODER_URL, params={
                "apikey": YANDEX_API_KEY,
                "geocode": f"{lon},{lat}",
                "format": "json",
                "kind": kind,
                "results": 1
            })
            response.raise_for_status()
            data = response.json()
            feature = data['response']['GeoObjectCollection']['featureMember']
            if feature:
                name = feature[0]['GeoObject']['name']
                if kind == "district":
                    district = name
                else:
                    metro = name
        return district, metro
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∫—Ä—É–≥–∞/–º–µ—Ç—Ä–æ: {e}")
        return None, None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É", callback_data=json.dumps({"action": "search_by_address"}))],
        [InlineKeyboardButton("üßæ –ü–æ–∏—Å–∫ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É", callback_data=json.dumps({"action": "search_by_cadastral"}))]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ú–æ—Å–∫–≤–µ.\n\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å, –æ–∫—Ä—É–≥, –º–µ—Ç—Ä–æ, –∞–Ω–∞–ª–æ–≥–∏, –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏, –≤—ã–≥—Ä—É–∑–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ üìç",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not query.data:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    try:
        data = json.loads(query.data)
    except json.JSONDecodeError:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    action = data.get("action")
    if action == "search_by_address":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    elif action == "search_by_cadastral":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
    elif action == "select_address":
        await process_selected_address(update, context, data)
    elif action == "analogs":
        lat, lon = data['lat'], data['lon']
        keyboard = [
            [InlineKeyboardButton("üèò –ê–≤–∏—Ç–æ", url=f"https://www.avito.ru/moskva/nedvizhimost?location={lat}%2C{lon}"),
             InlineKeyboardButton("üìç –¶–∏–∞–Ω", url=f"https://www.cian.ru/cat.php?deal_type=sale&region=1&center={lon},{lat}"),
             InlineKeyboardButton("üè° –Ø–Ω–¥–µ–∫—Å", url=f"https://realty.yandex.ru/moskva/?ll={lon}%2C{lat}&search_type=geo")]
        ]
        await query.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif action == "owner_info":
        cad_number = data.get("cad", "")
        if cad_number:
            buttons = [
                [InlineKeyboardButton("üîó –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫", url=f"https://proverki.gov.ru/"),
                 InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)", callback_data=json.dumps({"action": "owner_future"}))]
            ]
            await query.message.reply_text("üìÑ –ö–∞–∫ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è?", reply_markup=InlineKeyboardMarkup(buttons))
    elif action == "owner_future":
        await query.message.reply_text("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif action == "objects_inside":
        await query.message.reply_text("üìÇ –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")

async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input.count(":") == 3:
        cad_number = user_input.strip()
        url = f"https://pkk.rosreestr.ru/#/search/{cad_number}"
        await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {cad_number}\n\nüìò –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {url}")
        return

    if not user_input.lower().startswith("–º–æ—Å–∫–≤–∞"):
        user_input = f"–ú–æ—Å–∫–≤–∞, {user_input}"

    suggestions = await fetch_coordinates(user_input)

    if not suggestions:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if len(suggestions) == 1:
        selected = suggestions[0]
        await process_selected_address(update, context, selected)
    else:
        buttons = []
        for s in suggestions:
            try:
                data = json.dumps({"action": "select_address", "lat": s['lat'], "lon": s['lon'], "address": s['address']})
                buttons.append([InlineKeyboardButton(text=s['address'], callback_data=data)])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await update.message.reply_text("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=InlineKeyboardMarkup(buttons))

async def process_selected_address(update: Update, context: ContextTypes.DEFAULT_TYPE, selected):
    lat, lon = selected['lat'], selected['lon']
    district, metro = await fetch_district_and_metro(lat, lon)

    info_parts = [f"üìç –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: {selected['address']}"]
    if district:
        info_parts.append(f"üèôÔ∏è –û–∫—Ä—É–≥: {district}")
    if metro:
        info_parts.append(f"üöá –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: {metro}")

    photo_url = f"https://static-maps.yandex.ru/1.x/?lang=ru_RU&ll={lon},{lat}&z=16&size=450,250&l=map&pt={lon},{lat},pm2rdm"

    buttons = [
        [
            InlineKeyboardButton("üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", url=f"https://yandex.ru/maps/?ll={lon},{lat}&z=18"),
            InlineKeyboardButton("üìò –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞", url=f"https://pkk.rosreestr.ru/#/?lat={lat}&lon={lon}&z=18")
        ],
        [
            InlineKeyboardButton("üìÇ –û–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏", callback_data=json.dumps({"action": "objects_inside", "lat": lat, "lon": lon}))
        ],
        [
            InlineKeyboardButton("üí∞ –ê–Ω–∞–ª–æ–≥–∏ –ø–æ —Ü–µ–Ω–µ –∏ –ø–ª–æ—â–∞–¥–∏", callback_data=json.dumps({"action": "analogs", "lat": lat, "lon": lon}))
        ],
        [
            InlineKeyboardButton("üìÑ –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å", callback_data=json.dumps({"action": "owner_info", "cad": "77:01:000401:999"}))
        ]
    ]

    await update.message.reply_photo(
        photo=photo_url,
        caption="\n".join(info_parts),
        reply_markup=InlineKeyboardMarkup(buttons)
    )

app = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address))
app.add_handler(CallbackQueryHandler(handle_callback))

if __name__ == "__main__":
    app.run_polling()
